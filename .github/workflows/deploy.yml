name: Laravel 链接聚合应用 - 自动化部署

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: 代码质量检查
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 PHP 环境
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, gd
        coverage: xdebug
        
    - name: 缓存 Composer 依赖
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: dependencies-composer-${{ hashFiles('composer.json') }}
        
    - name: 安装 Composer 依赖
      run: composer install --no-progress --prefer-dist --optimize-autoloader
      
    - name: 设置 Node.js 环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安装前端依赖
      run: npm ci
      
    - name: 构建前端资源
      run: npm run build
      
    - name: 复制环境配置文件
      run: cp .env.example .env
      
    - name: 生成应用密钥
      run: php artisan key:generate
      
    - name: 创建数据库
      run: |
        mkdir -p database
        touch database/database.sqlite
        
    - name: 运行数据库迁移
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan migrate --force
      
    - name: 运行 PHPUnit 测试
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan test --coverage
      
    - name: 运行 PHP CS Fixer
      run: |
        composer require --dev friendsofphp/php-cs-fixer
        ./vendor/bin/php-cs-fixer fix --dry-run --diff
        
    - name: 运行 PHPStan 静态分析
      run: |
        composer require --dev phpstan/phpstan
        ./vendor/bin/phpstan analyse --memory-limit=2G

  # 构建 Docker 镜像
  build-docker:
    runs-on: ubuntu-latest
    name: 构建 Docker 镜像
    needs: code-quality
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 构建并推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/laravel-links:latest
          ${{ secrets.DOCKER_USERNAME }}/laravel-links:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    name: 部署到生产环境
    needs: [code-quality, build-docker]
    if: github.ref == 'refs/heads/production'
    environment: production
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /var/www/laravel-links
          
          # 拉取最新代码
          git pull origin production
          
          # 运行部署脚本
          sudo ./deploy.sh deploy
          
          # 检查部署状态
          ./deploy.sh verify
          
    - name: 发送部署通知
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # 部署到测试环境
  deploy-staging:
    runs-on: ubuntu-latest
    name: 部署到测试环境
    needs: [code-quality, build-docker]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到测试服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /var/www/laravel-links-staging
          
          # 拉取最新代码
          git pull origin main
          
          # 使用 Docker Compose 部署
          docker-compose pull
          docker-compose up -d --build
          
          # 等待服务启动
          sleep 30
          
          # 运行健康检查
          curl -f http://localhost/health || exit 1

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    name: 安全扫描
    needs: code-quality
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行 Composer 安全审计
      run: |
        composer audit
        
    - name: 运行 npm 安全审计
      run: |
        npm audit --audit-level=high
        
    - name: Docker 镜像安全扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'laravel-links:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 上传安全扫描结果
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    name: 性能测试
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行负载测试
      run: |
        # 安装 Apache Bench
        sudo apt-get update
        sudo apt-get install -y apache2-utils
        
        # 运行基本负载测试
        ab -n 1000 -c 10 ${{ secrets.STAGING_URL }}/
        
        # 运行登录页面测试
        ab -n 500 -c 5 ${{ secrets.STAGING_URL }}/login
        
    - name: 运行 Lighthouse 性能测试
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.STAGING_URL }}
          ${{ secrets.STAGING_URL }}/login
          ${{ secrets.STAGING_URL }}/register
        uploadArtifacts: true
        temporaryPublicStorage: true